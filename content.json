{"meta":{"title":"Shih's blog","subtitle":"","description":"","author":"shih","url":"https://hangyyds.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-02-14T12:25:34.646Z","updated":"2022-02-14T12:25:34.646Z","comments":false,"path":"/404.html","permalink":"https://hangyyds.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-02-14T12:25:34.647Z","updated":"2022-02-14T12:25:34.647Z","comments":false,"path":"about/index.html","permalink":"https://hangyyds.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2022-02-14T12:25:34.647Z","updated":"2022-02-14T12:25:34.647Z","comments":false,"path":"books/index.html","permalink":"https://hangyyds.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-02-14T12:25:34.647Z","updated":"2022-02-14T12:25:34.647Z","comments":false,"path":"categories/index.html","permalink":"https://hangyyds.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-02-14T12:25:34.647Z","updated":"2022-02-14T12:25:34.647Z","comments":true,"path":"links/index.html","permalink":"https://hangyyds.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-02-14T12:25:34.648Z","updated":"2022-02-14T12:25:34.648Z","comments":false,"path":"repository/index.html","permalink":"https://hangyyds.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-02-14T12:25:34.648Z","updated":"2022-02-14T12:25:34.648Z","comments":false,"path":"tags/index.html","permalink":"https://hangyyds.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"01-对java爬虫的笔记记录","slug":"01-对java爬虫的笔记记录","date":"2022-02-16T10:44:48.000Z","updated":"2022-02-16T12:03:49.099Z","comments":true,"path":"2022/02/16/01-对java爬虫的笔记记录/","link":"","permalink":"https://hangyyds.github.io/2022/02/16/01-%E5%AF%B9java%E7%88%AC%E8%99%AB%E7%9A%84%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/","excerpt":"","text":"对java爬虫的笔记记录前言​ 最近无聊开始瞎折腾爬虫相关的功能，目前只接触到非常浅显的知识，做做笔记吧，不然总觉得一天又白折腾，啥也没收获到。通过在github上的搜索，找到了一个Java开发的爬虫框架–AiPa,一款小巧、灵活的Java多线程爬虫框架，依赖当下最简单的HTML解析器Jsoup，只需要使用者提供网址集合，即可在多线程下自动爬取，并对一些异常进行处理。 AiPa仓库链接：https://github.com/onblog/AiPa AiPa初了解​ 通过实现AiPaWorker接口，来处理html元素，获取你想要的内容。这种方式需要jsoup解析html元素，所以对jsoup工具也要有所了解。还一种方式是直接通过url获取所请求网站的接口，对返回的json数据进行加工处理，来获取你想要的内容。 12345678910111213141516public interface AiPaWorker&lt;T,S&gt; &#123; /** * 如何解析爬下来的HTML文档？ * @param doc JSOUP提供的文档 * @param util 爬虫工具类 * @return */ T run(Document doc, AiPaUtil util); /** * run方法异常则执行fail方法 * @param link 网址 * @return */ S fail(String link);&#125; ​ run()方法是用户自定义处理爬取的HTML内容，一般是利用Jsoup的Document类进行解析，获取节点或属性等，然后保存到数据库或本地文件中。如果在业务方法需要再次请求URL，可以使用工具类Util。 使用HttpURLConnection与所请求服务器连接​ 除了抓取html元素，直接通过服务器接口返回json数据岂不是更香。这两天倒腾了一下，也走了不少弯路，勉强调通了一个接口，抓取微博的热搜榜相关信息。 ​","categories":[{"name":"Java之瞎折腾系列","slug":"Java之瞎折腾系列","permalink":"https://hangyyds.github.io/categories/Java%E4%B9%8B%E7%9E%8E%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://hangyyds.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Java随手笔记","slug":"Java随手笔记","date":"2022-02-16T00:52:20.000Z","updated":"2022-02-16T08:46:55.359Z","comments":true,"path":"2022/02/16/Java随手笔记/","link":"","permalink":"https://hangyyds.github.io/2022/02/16/Java%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/","excerpt":"","text":"SpringBootSpringBoot 框架中的 DAO 层、Entity 层、Service 层、Controller 层 一般的项目模块中都有 DAO、Entity、Service、Controller 层。 Entity 层：实体层 数据库在项目中的类 Entity 层是实体层，也就是所谓的 model，也称为 pojo 层，是数据库在项目中的类，该文件包含实体类的属性和对应属性的 set、get 方法； DAO 层： 持久层 主要与数据库进行交互 DAO 层=mapper 层，现在用 Mybatis 逆向工程生成的 mapper 层，其实就是 dao 层。DAO 层会调用 entity 层，DAO 中会定义实际使用到的方法，比如增删改查。DAO 层的数据源和数据库连接的参数都是在配置文件中进行配置的，配置文件一般在同层的 XML 文件夹中。数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作。 Service 层：业务层 控制业务 Service 层主要负责业务模块的逻辑应用设计。先设计放接口的类，再创建实现的类，然后在配置文件中进行配置其实现的关联。service 层调用 dao 层接口，接收 dao 层返回的数据，完成项目的基本功能设计。 封装 Service 层的业务逻辑有利于业务逻辑的独立性和重复利用性。 Controller 层：控制层 控制业务逻辑 Controller 层负责具体的业务模块流程的控制，controller 层负责前后端交互，接受前端请求，调用 service 层，接收 service 层返回的数据，最后返回具体的页面和数据到客户端。Controller 层像是一个服务员，他把客人（前端）点的菜（数据、请求的类型等）进行汇总什么口味、咸淡、量的多少，交给厨师长（Service 层），厨师长则告诉沾板厨师（Dao 1）、汤料房（Dao 2）、配菜厨师（Dao 3）等（统称 Dao 层）我需要什么样的半成品，副厨们（Dao 层）就负责完成厨师长（Service）交代的任务。 在具体的项目中，其流程为： 1Controller--&gt;service接口--&gt;serviceImpl--&gt;dao接口--&gt;daoImpl--&gt;mapper--&gt;db PO,BO,VO 和 POJO 的区别 PO：persistent object 持久对象 有时也被称为 Data 对象，对应数据库中的 entity，可以简单认为一个 PO 对应数据库中的一条记录。 POJO ：plain ordinary java object 无规则简单 java 对象 一个中间对象，可以转化为 PO、DTO、VO。 BO：business object 业务对象 业务对象主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。我们可以把教育经历对应一个 PO，工作经历对应一个 PO，社会关系对应一个 PO。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO。 这样处理业务逻辑时，我们就可以针对 BO 去处理。 封装业务逻辑为一个对象（可以包括多个 PO，通常需要将 BO 转化成 PO，才能进行数据的持久化，反之，从 DB 中得到的 PO，需要转化成 BO 才能在业务层使用）。 关于 BO 主要有三种概念 1 、只包含业务对象的属性； 2 、只包含业务方法； 3 、两者都包含。 VO：value object 值对象 / view object 表现层对象 对应页面显示（web 页面/swt、swing 界面）的数据对象。 DTO（TO）：Data Transfer Object 数据传输对象 用在需要跨进程或远程传输时，它不应该包含业务逻辑。 比如一张表有 100 个字段，那么对应的 PO 就有 100 个属性（大多数情况下，DTO 内的数据来自多个表）。但 view 层只需显示 10 个字段，没有必要把整个 PO 对象传递到 client，这时我们就可以用只有这 10 个属性的 DTO 来传输数据到 client，这样也不会暴露 server 端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为 VO。 DAO：data access object 数据访问对象 主要用来封装对 DB 的访问（CRUD 操作）。 参考：https://blog.csdn.net/u011870547/article/details/81077153","categories":[{"name":"Java","slug":"Java","permalink":"https://hangyyds.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hangyyds.github.io/tags/Java/"}]},{"title":"开启博客之旅","slug":"开启博客之旅","date":"2022-02-14T08:09:59.000Z","updated":"2022-02-16T08:46:57.658Z","comments":true,"path":"2022/02/14/开启博客之旅/","link":"","permalink":"https://hangyyds.github.io/2022/02/14/%E5%BC%80%E5%90%AF%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/","excerpt":"","text":"创建的第一篇文章，博客搭建并托管 github 成功。","categories":[{"name":"Test","slug":"Test","permalink":"https://hangyyds.github.io/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"https://hangyyds.github.io/tags/Test/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-02-14T08:00:51.112Z","updated":"2022-02-16T08:46:56.472Z","comments":true,"path":"2022/02/14/hello-world/","link":"","permalink":"https://hangyyds.github.io/2022/02/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Java之瞎折腾系列","slug":"Java之瞎折腾系列","permalink":"https://hangyyds.github.io/categories/Java%E4%B9%8B%E7%9E%8E%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"},{"name":"Java","slug":"Java","permalink":"https://hangyyds.github.io/categories/Java/"},{"name":"Test","slug":"Test","permalink":"https://hangyyds.github.io/categories/Test/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://hangyyds.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"Java","slug":"Java","permalink":"https://hangyyds.github.io/tags/Java/"},{"name":"Test","slug":"Test","permalink":"https://hangyyds.github.io/tags/Test/"}]}